/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -f sokol_jai -l glsl330:hlsl5 -i ..\third_party\Simple_Framework\imgui\imgui_shaders.glsl -o ..\third_party\Simple_Framework\imgui\imgui_shaders.jai

    Overview:

        Shader program 'default':
            Get shader desc:
                ImGui_default_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    Attr_ImGui_vs_vPos = 0
                    Attr_ImGui_vs_vUV = 1
                    Attr_ImGui_vs_vColor = 2
                Uniform block 'data':
                    C struct: ImGui_data_t
                    Bind slot: Slot_ImGui_data = 0
            Fragment shader: fs
                Image 'TEXTURE':
                    Type: ._2D
                    Component Type: .FLOAT
                    Bind slot: Slot_ImGui_TEXTURE = 0

*/
Attr_ImGui_vs_vPos :: 0;
Attr_ImGui_vs_vUV :: 1;
Attr_ImGui_vs_vColor :: 2;
Slot_ImGui_TEXTURE :: 0;
Slot_ImGui_data :: 0;
ImGui_Data :: struct {
    display_size: [2] float32;
    _padding: [8] u8;
}
#scope_file
/*
   #version 330
   
   uniform vec4 data[1];
   layout(location = 0) in vec2 vPos;
   out vec2 fUV;
   layout(location = 1) in vec2 vUV;
   out vec4 fColor;
   layout(location = 2) in vec4 vColor;
   
   void main()
   {
       gl_Position = vec4(((vPos / data[0].xy) - vec2(0.5)) * vec2(2.0, -2.0), 0.5, 1.0);
       fUV = vUV;
       fColor = vColor;
   }
   
*/
ImGui_vs_source_glsl330 :: u8.[
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x64,0x61,0x74,0x61,0x5b,
    0x31,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x76,0x50,0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,
    0x66,0x55,0x56,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x76,0x55,0x56,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x66,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,
    0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x76,0x65,
    0x63,0x34,0x28,0x28,0x28,0x76,0x50,0x6f,0x73,0x20,0x2f,0x20,0x64,0x61,0x74,0x61,
    0x5b,0x30,0x5d,0x2e,0x78,0x79,0x29,0x20,0x2d,0x20,0x76,0x65,0x63,0x32,0x28,0x30,
    0x2e,0x35,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x32,0x28,0x32,0x2e,0x30,0x2c,
    0x20,0x2d,0x32,0x2e,0x30,0x29,0x2c,0x20,0x30,0x2e,0x35,0x2c,0x20,0x31,0x2e,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x55,0x56,0x20,0x3d,0x20,0x76,0x55,0x56,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
];
/*
   #version 330
   
   uniform sampler2D TEXTURE;
   
   layout(location = 0) out vec4 COLOR;
   in vec2 fUV;
   in vec4 fColor;
   
   void main()
   {
       COLOR = texture(TEXTURE, fUV) * fColor;
   }
   
*/
ImGui_fs_source_glsl330 :: u8.[
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x54,0x45,0x58,0x54,0x55,0x52,0x45,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,
    0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,
    0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x3b,0x0a,0x69,
    0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x55,0x56,0x3b,0x0a,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x34,0x20,0x66,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x43,
    0x4f,0x4c,0x4f,0x52,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x54,
    0x45,0x58,0x54,0x55,0x52,0x45,0x2c,0x20,0x66,0x55,0x56,0x29,0x20,0x2a,0x20,0x66,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
];
#scope_file
/*
   cbuffer data : register(b0)
   {
       float2 _24_display_size : packoffset(c0);
   };
   
   
   static float4 gl_Position;
   static float2 vPos;
   static float2 fUV;
   static float2 vUV;
   static float4 fColor;
   static float4 vColor;
   
   struct SPIRV_Cross_Input
   {
       float2 vPos : TEXCOORD0;
       float2 vUV : TEXCOORD1;
       float4 vColor : TEXCOORD2;
   };
   
   struct SPIRV_Cross_Output
   {
       float2 fUV : TEXCOORD0;
       float4 fColor : TEXCOORD1;
       float4 gl_Position : SV_Position;
   };
   
   #line 17 "..\third_party\Simple_Framework\imgui\imgui_shaders.glsl"
   void vert_main()
   {
   #line 17 "..\third_party\Simple_Framework\imgui\imgui_shaders.glsl"
       gl_Position = float4(((vPos / _24_display_size) - 0.5f.xx) * float2(2.0f, -2.0f), 0.5f, 1.0f);
   #line 19 "..\third_party\Simple_Framework\imgui\imgui_shaders.glsl"
       fUV = vUV;
   #line 20 "..\third_party\Simple_Framework\imgui\imgui_shaders.glsl"
       fColor = vColor;
   }
   
   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       vPos = stage_input.vPos;
       vUV = stage_input.vUV;
       vColor = stage_input.vColor;
       vert_main();
       SPIRV_Cross_Output stage_output;
       stage_output.gl_Position = gl_Position;
       stage_output.fUV = fUV;
       stage_output.fColor = fColor;
       return stage_output;
   }
*/
ImGui_vs_source_hlsl5 :: u8.[
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x64,0x61,0x74,0x61,0x20,0x3a,0x20,0x72,
    0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x5f,0x32,0x34,0x5f,0x64,0x69,0x73,
    0x70,0x6c,0x61,0x79,0x5f,0x73,0x69,0x7a,0x65,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,
    0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x50,0x6f,0x73,0x3b,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x55,
    0x56,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x76,0x55,0x56,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x66,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x50,0x6f,0x73,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x76,0x55,0x56,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,
    0x4f,0x52,0x44,0x32,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,
    0x20,0x66,0x55,0x56,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,
    0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x23,0x6c,0x69,0x6e,0x65,
    0x20,0x31,0x37,0x20,0x22,0x2e,0x2e,0x5c,0x74,0x68,0x69,0x72,0x64,0x5f,0x70,0x61,
    0x72,0x74,0x79,0x5c,0x53,0x69,0x6d,0x70,0x6c,0x65,0x5f,0x46,0x72,0x61,0x6d,0x65,
    0x77,0x6f,0x72,0x6b,0x5c,0x69,0x6d,0x67,0x75,0x69,0x5c,0x69,0x6d,0x67,0x75,0x69,
    0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x37,0x20,0x22,0x2e,0x2e,0x5c,0x74,
    0x68,0x69,0x72,0x64,0x5f,0x70,0x61,0x72,0x74,0x79,0x5c,0x53,0x69,0x6d,0x70,0x6c,
    0x65,0x5f,0x46,0x72,0x61,0x6d,0x65,0x77,0x6f,0x72,0x6b,0x5c,0x69,0x6d,0x67,0x75,
    0x69,0x5c,0x69,0x6d,0x67,0x75,0x69,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,
    0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x28,
    0x28,0x76,0x50,0x6f,0x73,0x20,0x2f,0x20,0x5f,0x32,0x34,0x5f,0x64,0x69,0x73,0x70,
    0x6c,0x61,0x79,0x5f,0x73,0x69,0x7a,0x65,0x29,0x20,0x2d,0x20,0x30,0x2e,0x35,0x66,
    0x2e,0x78,0x78,0x29,0x20,0x2a,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x28,0x32,0x2e,
    0x30,0x66,0x2c,0x20,0x2d,0x32,0x2e,0x30,0x66,0x29,0x2c,0x20,0x30,0x2e,0x35,0x66,
    0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x3b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,
    0x39,0x20,0x22,0x2e,0x2e,0x5c,0x74,0x68,0x69,0x72,0x64,0x5f,0x70,0x61,0x72,0x74,
    0x79,0x5c,0x53,0x69,0x6d,0x70,0x6c,0x65,0x5f,0x46,0x72,0x61,0x6d,0x65,0x77,0x6f,
    0x72,0x6b,0x5c,0x69,0x6d,0x67,0x75,0x69,0x5c,0x69,0x6d,0x67,0x75,0x69,0x5f,0x73,
    0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x55,0x56,0x20,0x3d,0x20,0x76,0x55,0x56,0x3b,0x0a,0x23,0x6c,0x69,0x6e,
    0x65,0x20,0x32,0x30,0x20,0x22,0x2e,0x2e,0x5c,0x74,0x68,0x69,0x72,0x64,0x5f,0x70,
    0x61,0x72,0x74,0x79,0x5c,0x53,0x69,0x6d,0x70,0x6c,0x65,0x5f,0x46,0x72,0x61,0x6d,
    0x65,0x77,0x6f,0x72,0x6b,0x5c,0x69,0x6d,0x67,0x75,0x69,0x5c,0x69,0x6d,0x67,0x75,
    0x69,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,
    0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,
    0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,
    0x0a,0x20,0x20,0x20,0x20,0x76,0x50,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x76,0x50,0x6f,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x76,0x55,0x56,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x76,0x55,0x56,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x43,0x6f,
    0x6c,0x6f,0x72,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,
    0x74,0x2e,0x76,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,
    0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x67,
    0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x55,0x56,
    0x20,0x3d,0x20,0x66,0x55,0x56,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x66,0x43,0x6f,0x6c,0x6f,0x72,0x20,
    0x3d,0x20,0x66,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,
    0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,
    0x74,0x3b,0x0a,0x7d,0x0a,0x00,
];
/*
   Texture2D<float4> TEXTURE : register(t0);
   SamplerState _TEXTURE_sampler : register(s0);
   
   static float4 COLOR;
   static float2 fUV;
   static float4 fColor;
   
   struct SPIRV_Cross_Input
   {
       float2 fUV : TEXCOORD0;
       float4 fColor : TEXCOORD1;
   };
   
   struct SPIRV_Cross_Output
   {
       float4 COLOR : SV_Target0;
   };
   
   #line 13 "..\third_party\Simple_Framework\imgui\imgui_shaders.glsl"
   void frag_main()
   {
   #line 13 "..\third_party\Simple_Framework\imgui\imgui_shaders.glsl"
       COLOR = TEXTURE.Sample(_TEXTURE_sampler, fUV) * fColor;
   }
   
   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       fUV = stage_input.fUV;
       fColor = stage_input.fColor;
       frag_main();
       SPIRV_Cross_Output stage_output;
       stage_output.COLOR = COLOR;
       return stage_output;
   }
*/
ImGui_fs_source_hlsl5 :: u8.[
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x54,0x45,0x58,0x54,0x55,0x52,0x45,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,
    0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x5f,0x54,0x45,0x58,0x54,0x55,0x52,0x45,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,
    0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x3b,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x55,0x56,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,
    0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,
    0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x66,0x55,
    0x56,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x43,0x6f,0x6c,0x6f,0x72,
    0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x7d,0x3b,
    0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,
    0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x20,0x3a,
    0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,
    0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x2e,0x2e,0x5c,0x74,0x68,
    0x69,0x72,0x64,0x5f,0x70,0x61,0x72,0x74,0x79,0x5c,0x53,0x69,0x6d,0x70,0x6c,0x65,
    0x5f,0x46,0x72,0x61,0x6d,0x65,0x77,0x6f,0x72,0x6b,0x5c,0x69,0x6d,0x67,0x75,0x69,
    0x5c,0x69,0x6d,0x67,0x75,0x69,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x67,
    0x6c,0x73,0x6c,0x22,0x0a,0x76,0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,
    0x20,0x22,0x2e,0x2e,0x5c,0x74,0x68,0x69,0x72,0x64,0x5f,0x70,0x61,0x72,0x74,0x79,
    0x5c,0x53,0x69,0x6d,0x70,0x6c,0x65,0x5f,0x46,0x72,0x61,0x6d,0x65,0x77,0x6f,0x72,
    0x6b,0x5c,0x69,0x6d,0x67,0x75,0x69,0x5c,0x69,0x6d,0x67,0x75,0x69,0x5f,0x73,0x68,
    0x61,0x64,0x65,0x72,0x73,0x2e,0x67,0x6c,0x73,0x6c,0x22,0x0a,0x20,0x20,0x20,0x20,
    0x43,0x4f,0x4c,0x4f,0x52,0x20,0x3d,0x20,0x54,0x45,0x58,0x54,0x55,0x52,0x45,0x2e,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x5f,0x54,0x45,0x58,0x54,0x55,0x52,0x45,0x5f,
    0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x66,0x55,0x56,0x29,0x20,0x2a,0x20,
    0x66,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,
    0x6e,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,
    0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x55,0x56,0x20,0x3d,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x55,0x56,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,
    0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x66,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,
    0x74,0x70,0x75,0x74,0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x43,0x4f,0x4c,0x4f,0x52,0x20,0x3d,0x20,0x43,
    0x4f,0x4c,0x4f,0x52,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,
    0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,
    0x0a,0x00,
];

#scope_export
ImGui_default_shader_desc :: (backend: sg_backend) -> sg_shader_desc {
    desc: sg_shader_desc;
    if backend == {
        case .GLCORE33;
            desc.attrs[0].name = "vPos";
            desc.attrs[1].name = "vUV";
            desc.attrs[2].name = "vColor";
            desc.vs.source = ImGui_vs_source_glsl330.data;
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 16;
            desc.vs.uniform_blocks[0].layout = .STD140;
            desc.vs.uniform_blocks[0].uniforms[0].name = "data";
            desc.vs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.vs.uniform_blocks[0].uniforms[0].array_count = 1;
            desc.fs.source = ImGui_fs_source_glsl330.data;
            desc.fs.entry = "main";
            desc.fs.images[0].name = "TEXTURE";
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sampler_type = .FLOAT;
            desc.label = "ImGui_default_shader";
        case .D3D11;
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.attrs[1].sem_name = "TEXCOORD";
            desc.attrs[1].sem_index = 1;
            desc.attrs[2].sem_name = "TEXCOORD";
            desc.attrs[2].sem_index = 2;
            desc.vs.source = ImGui_vs_source_hlsl5.data;
            desc.vs.d3d11_target = "vs_5_0";
            desc.vs.entry = "main";
            desc.vs.uniform_blocks[0].size = 16;
            desc.vs.uniform_blocks[0].layout = .STD140;
            desc.fs.source = ImGui_fs_source_hlsl5.data;
            desc.fs.d3d11_target = "ps_5_0";
            desc.fs.entry = "main";
            desc.fs.images[0].name = "TEXTURE";
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sampler_type = .FLOAT;
            desc.label = "ImGui_default_shader";
    }
    return desc;
}
