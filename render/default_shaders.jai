/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc -b -f sokol_jai -l glsl330:hlsl5 -i modules/Simple_Framework/render/default_shaders.glsl -o modules/Simple_Framework/render/default_shaders.jai

    Overview:

        Shader program 'circle':
            Get shader desc:
                base_circle_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    Attr_base_vs_vPosUV = 0
            Fragment shader: circle_fs
                Uniform block 'circle_data':
                    C struct: base_circle_data_t
                    Bind slot: Slot_base_circle_data = 0
                Image 'TEXTURE':
                    Type: ._2D
                    Component Type: .FLOAT
                    Bind slot: Slot_base_TEXTURE = 0

        Shader program 'default':
            Get shader desc:
                base_default_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    Attr_base_vs_vPosUV = 0
            Fragment shader: default_fs
                Uniform block 'default_data':
                    C struct: base_default_data_t
                    Bind slot: Slot_base_default_data = 0
                Image 'TEXTURE':
                    Type: ._2D
                    Component Type: .FLOAT
                    Bind slot: Slot_base_TEXTURE = 0

        Shader program 'text':
            Get shader desc:
                base_text_shader_desc(sg_query_backend());
            Vertex shader: vs
                Attribute slots:
                    Attr_base_vs_vPosUV = 0
            Fragment shader: text_fs
                Uniform block 'text_data':
                    C struct: base_text_data_t
                    Bind slot: Slot_base_text_data = 0
                Image 'TEXTURE':
                    Type: ._2D
                    Component Type: .FLOAT
                    Bind slot: Slot_base_TEXTURE = 0

*/
Attr_base_vs_vPosUV :: 0;
Slot_base_TEXTURE :: 0;
Slot_base_default_data :: 0;
Base_Default_Data :: struct {
    color: [4] float32;
}
Slot_base_circle_data :: 0;
Base_Circle_Data :: struct {
    color: [4] float32;
    radius: [2] float32;
    _padding: [8] u8;
}
Slot_base_text_data :: 0;
Base_Text_Data :: struct {
    color: [4] float32;
    text_params: [2] float32;
    _padding: [8] u8;
}
#scope_file
/*
   #version 330

   layout(location = 0) in vec4 vPosUV;
   out vec2 fUV;

   void main()
   {
       gl_Position = vec4(vPosUV.xy, 0.0, 1.0);
       fUV = vPosUV.zw;
   }

*/
base_vs_source_glsl330 :: u8.[
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x50,0x6f,0x73,0x55,
    0x56,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x55,0x56,0x3b,
    0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x76,0x50,0x6f,0x73,0x55,0x56,0x2e,0x78,0x79,
    0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x55,0x56,0x20,0x3d,0x20,0x76,0x50,0x6f,0x73,0x55,0x56,0x2e,0x7a,0x77,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
];
/*
   #version 330

   uniform vec4 default_data[1];
   uniform sampler2D TEXTURE;

   layout(location = 0) out vec4 COLOR;
   in vec2 fUV;

   void main()
   {
       COLOR = texture(TEXTURE, fUV) * default_data[0];
   }

*/
base_default_fs_source_glsl330 :: u8.[
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x64,0x65,0x66,0x61,0x75,
    0x6c,0x74,0x5f,0x64,0x61,0x74,0x61,0x5b,0x31,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x54,0x45,
    0x58,0x54,0x55,0x52,0x45,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,
    0x20,0x76,0x65,0x63,0x34,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x3b,0x0a,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x32,0x20,0x66,0x55,0x56,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x43,0x4f,0x4c,
    0x4f,0x52,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x54,0x45,0x58,
    0x54,0x55,0x52,0x45,0x2c,0x20,0x66,0x55,0x56,0x29,0x20,0x2a,0x20,0x64,0x65,0x66,
    0x61,0x75,0x6c,0x74,0x5f,0x64,0x61,0x74,0x61,0x5b,0x30,0x5d,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x00,
];
/*
   #version 330

   uniform vec4 circle_data[2];
   uniform sampler2D TEXTURE;

   layout(location = 0) out vec4 COLOR;
   in vec2 fUV;

   float circle(vec2 _position, float _inner_radius, float _outer_radius)
   {
       vec2 _22 = _position - vec2(0.5);
       float _37 = dot(_22, _22) * 4.0;
       return (1.0 - smoothstep(_outer_radius - (_outer_radius * 0.00999999977648258209228515625), _outer_radius + (_outer_radius * 0.00999999977648258209228515625), _37)) - (1.0 - smoothstep(_inner_radius - (_inner_radius * 0.00999999977648258209228515625), _inner_radius + (_inner_radius * 0.00999999977648258209228515625), _37));
   }

   void main()
   {
       COLOR = texture(TEXTURE, fUV);
       vec2 param = fUV;
       float param_1 = circle_data[1].x;
       float param_2 = circle_data[1].y;
       COLOR *= vec4(circle_data[0].xyz, circle(param, param_1, param_2) * circle_data[0].w);
   }

*/
base_circle_fs_source_glsl330 :: u8.[
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x63,0x69,0x72,0x63,0x6c,
    0x65,0x5f,0x64,0x61,0x74,0x61,0x5b,0x32,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,
    0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x54,0x45,0x58,
    0x54,0x55,0x52,0x45,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x76,0x65,0x63,0x34,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x3b,0x0a,0x69,0x6e,0x20,0x76,
    0x65,0x63,0x32,0x20,0x66,0x55,0x56,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x63,0x69,0x72,0x63,0x6c,0x65,0x28,0x76,0x65,0x63,0x32,0x20,0x5f,0x70,0x6f,0x73,
    0x69,0x74,0x69,0x6f,0x6e,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x69,0x6e,
    0x6e,0x65,0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x5f,0x6f,0x75,0x74,0x65,0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x32,0x32,0x20,
    0x3d,0x20,0x5f,0x70,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x2d,0x20,0x76,0x65,
    0x63,0x32,0x28,0x30,0x2e,0x35,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x33,0x37,0x20,0x3d,0x20,0x64,0x6f,0x74,0x28,0x5f,0x32,0x32,
    0x2c,0x20,0x5f,0x32,0x32,0x29,0x20,0x2a,0x20,0x34,0x2e,0x30,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x5f,0x6f,0x75,0x74,0x65,
    0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2d,0x20,0x28,0x5f,0x6f,0x75,0x74,
    0x65,0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,
    0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,0x36,0x34,0x38,0x32,0x35,0x38,0x32,
    0x30,0x39,0x32,0x32,0x38,0x35,0x31,0x35,0x36,0x32,0x35,0x29,0x2c,0x20,0x5f,0x6f,
    0x75,0x74,0x65,0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2b,0x20,0x28,0x5f,
    0x6f,0x75,0x74,0x65,0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2a,0x20,0x30,
    0x2e,0x30,0x30,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,0x36,0x34,0x38,0x32,
    0x35,0x38,0x32,0x30,0x39,0x32,0x32,0x38,0x35,0x31,0x35,0x36,0x32,0x35,0x29,0x2c,
    0x20,0x5f,0x33,0x37,0x29,0x29,0x20,0x2d,0x20,0x28,0x31,0x2e,0x30,0x20,0x2d,0x20,
    0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x5f,0x69,0x6e,0x6e,0x65,
    0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2d,0x20,0x28,0x5f,0x69,0x6e,0x6e,
    0x65,0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2a,0x20,0x30,0x2e,0x30,0x30,
    0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,0x36,0x34,0x38,0x32,0x35,0x38,0x32,
    0x30,0x39,0x32,0x32,0x38,0x35,0x31,0x35,0x36,0x32,0x35,0x29,0x2c,0x20,0x5f,0x69,
    0x6e,0x6e,0x65,0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2b,0x20,0x28,0x5f,
    0x69,0x6e,0x6e,0x65,0x72,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x20,0x2a,0x20,0x30,
    0x2e,0x30,0x30,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,0x36,0x34,0x38,0x32,
    0x35,0x38,0x32,0x30,0x39,0x32,0x32,0x38,0x35,0x31,0x35,0x36,0x32,0x35,0x29,0x2c,
    0x20,0x5f,0x33,0x37,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x43,0x4f,0x4c,
    0x4f,0x52,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x54,0x45,0x58,
    0x54,0x55,0x52,0x45,0x2c,0x20,0x66,0x55,0x56,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x63,0x32,0x20,0x70,0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x66,0x55,0x56,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x5f,0x31,0x20,0x3d,0x20,0x63,0x69,0x72,0x63,0x6c,0x65,0x5f,0x64,0x61,0x74,
    0x61,0x5b,0x31,0x5d,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x63,0x69,0x72,0x63,
    0x6c,0x65,0x5f,0x64,0x61,0x74,0x61,0x5b,0x31,0x5d,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x20,0x2a,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,
    0x63,0x69,0x72,0x63,0x6c,0x65,0x5f,0x64,0x61,0x74,0x61,0x5b,0x30,0x5d,0x2e,0x78,
    0x79,0x7a,0x2c,0x20,0x63,0x69,0x72,0x63,0x6c,0x65,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x29,0x20,0x2a,0x20,0x63,0x69,0x72,0x63,0x6c,0x65,0x5f,0x64,0x61,0x74,
    0x61,0x5b,0x30,0x5d,0x2e,0x77,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
];
/*
   #version 330

   uniform vec4 text_data[2];
   uniform sampler2D TEXTURE;

   in vec2 fUV;
   layout(location = 0) out vec4 COLOR;

   float msdf_median(float r, float g, float b, float a)
   {
       return min(max(min(r, g), min(max(r, g), b)), a);
   }

   void main()
   {
       vec4 _57 = texture(TEXTURE, fUV);
       vec2 _70 = fwidth(fUV);
       float _81 = max(0.5 * dot(vec2(text_data[1].x) / vec2(textureSize(TEXTURE, 0)), vec2(1.0) / _70), 1.0);
       float param = _57.x;
       float param_1 = _57.y;
       float param_2 = _57.z;
       float param_3 = _57.w;
       float _98 = msdf_median(param, param_1, param_2, param_3) - 0.5;
       COLOR = text_data[0];
       if (text_data[1].y > 0.0)
       {
           COLOR.w *= clamp((_98 + (clamp(text_data[1].y, 0.0, text_data[1].x * 0.5) / text_data[1].x)) * _81, 0.0, 1.0);
       }
       else
       {
           COLOR.w *= clamp((_98 * _81) + 0.5, 0.0, 1.0);
       }
   }

*/
base_text_fs_source_glsl330 :: u8.[
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x74,0x65,0x78,0x74,0x5f,
    0x64,0x61,0x74,0x61,0x5b,0x32,0x5d,0x3b,0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,
    0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x54,0x45,0x58,0x54,0x55,
    0x52,0x45,0x3b,0x0a,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x66,0x55,0x56,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,
    0x43,0x4f,0x4c,0x4f,0x52,0x3b,0x0a,0x0a,0x66,0x6c,0x6f,0x61,0x74,0x20,0x6d,0x73,
    0x64,0x66,0x5f,0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x72,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x67,0x2c,0x20,0x66,0x6c,0x6f,0x61,
    0x74,0x20,0x62,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x61,0x29,0x0a,0x7b,0x0a,
    0x20,0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6d,0x69,0x6e,0x28,0x6d,
    0x61,0x78,0x28,0x6d,0x69,0x6e,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x6d,0x69,
    0x6e,0x28,0x6d,0x61,0x78,0x28,0x72,0x2c,0x20,0x67,0x29,0x2c,0x20,0x62,0x29,0x29,
    0x2c,0x20,0x61,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,
    0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,0x63,0x34,0x20,
    0x5f,0x35,0x37,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x54,0x45,
    0x58,0x54,0x55,0x52,0x45,0x2c,0x20,0x66,0x55,0x56,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x76,0x65,0x63,0x32,0x20,0x5f,0x37,0x30,0x20,0x3d,0x20,0x66,0x77,0x69,0x64,
    0x74,0x68,0x28,0x66,0x55,0x56,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x5f,0x38,0x31,0x20,0x3d,0x20,0x6d,0x61,0x78,0x28,0x30,0x2e,0x35,
    0x20,0x2a,0x20,0x64,0x6f,0x74,0x28,0x76,0x65,0x63,0x32,0x28,0x74,0x65,0x78,0x74,
    0x5f,0x64,0x61,0x74,0x61,0x5b,0x31,0x5d,0x2e,0x78,0x29,0x20,0x2f,0x20,0x76,0x65,
    0x63,0x32,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x53,0x69,0x7a,0x65,0x28,0x54,
    0x45,0x58,0x54,0x55,0x52,0x45,0x2c,0x20,0x30,0x29,0x29,0x2c,0x20,0x76,0x65,0x63,
    0x32,0x28,0x31,0x2e,0x30,0x29,0x20,0x2f,0x20,0x5f,0x37,0x30,0x29,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,
    0x61,0x72,0x61,0x6d,0x20,0x3d,0x20,0x5f,0x35,0x37,0x2e,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,
    0x3d,0x20,0x5f,0x35,0x37,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,0x5f,0x35,0x37,
    0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x70,0x61,
    0x72,0x61,0x6d,0x5f,0x33,0x20,0x3d,0x20,0x5f,0x35,0x37,0x2e,0x77,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,0x5f,0x39,0x38,0x20,0x3d,0x20,0x6d,
    0x73,0x64,0x66,0x5f,0x6d,0x65,0x64,0x69,0x61,0x6e,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,
    0x5f,0x32,0x2c,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x33,0x29,0x20,0x2d,0x20,0x30,
    0x2e,0x35,0x3b,0x0a,0x20,0x20,0x20,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x20,0x3d,0x20,
    0x74,0x65,0x78,0x74,0x5f,0x64,0x61,0x74,0x61,0x5b,0x30,0x5d,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x69,0x66,0x20,0x28,0x74,0x65,0x78,0x74,0x5f,0x64,0x61,0x74,0x61,0x5b,
    0x31,0x5d,0x2e,0x79,0x20,0x3e,0x20,0x30,0x2e,0x30,0x29,0x0a,0x20,0x20,0x20,0x20,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x2e,
    0x77,0x20,0x2a,0x3d,0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x5f,0x39,0x38,0x20,
    0x2b,0x20,0x28,0x63,0x6c,0x61,0x6d,0x70,0x28,0x74,0x65,0x78,0x74,0x5f,0x64,0x61,
    0x74,0x61,0x5b,0x31,0x5d,0x2e,0x79,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x74,0x65,
    0x78,0x74,0x5f,0x64,0x61,0x74,0x61,0x5b,0x31,0x5d,0x2e,0x78,0x20,0x2a,0x20,0x30,
    0x2e,0x35,0x29,0x20,0x2f,0x20,0x74,0x65,0x78,0x74,0x5f,0x64,0x61,0x74,0x61,0x5b,
    0x31,0x5d,0x2e,0x78,0x29,0x29,0x20,0x2a,0x20,0x5f,0x38,0x31,0x2c,0x20,0x30,0x2e,
    0x30,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,
    0x20,0x20,0x20,0x65,0x6c,0x73,0x65,0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x20,0x20,0x20,0x20,0x43,0x4f,0x4c,0x4f,0x52,0x2e,0x77,0x20,0x2a,0x3d,
    0x20,0x63,0x6c,0x61,0x6d,0x70,0x28,0x28,0x5f,0x39,0x38,0x20,0x2a,0x20,0x5f,0x38,
    0x31,0x29,0x20,0x2b,0x20,0x30,0x2e,0x35,0x2c,0x20,0x30,0x2e,0x30,0x2c,0x20,0x31,
    0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x7d,0x0a,0x0a,0x00,
];
#scope_file
/*
   static float4 gl_Position;
   static float4 vPosUV;
   static float2 fUV;

   struct SPIRV_Cross_Input
   {
       float4 vPosUV : TEXCOORD0;
   };

   struct SPIRV_Cross_Output
   {
       float2 fUV : TEXCOORD0;
       float4 gl_Position : SV_Position;
   };

   #line 10 "modules/Simple_Framework/render/default_shaders.glsl"
   void vert_main()
   {
   #line 10 "modules/Simple_Framework/render/default_shaders.glsl"
       gl_Position = float4(vPosUV.xy, 0.0f, 1.0f);
   #line 11 "modules/Simple_Framework/render/default_shaders.glsl"
       fUV = vPosUV.zw;
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       vPosUV = stage_input.vPosUV;
       vert_main();
       SPIRV_Cross_Output stage_output;
       stage_output.gl_Position = gl_Position;
       stage_output.fUV = fUV;
       return stage_output;
   }
*/
base_vs_bytecode_hlsl5 :: u8.[
    0x44,0x58,0x42,0x43,0xfe,0x0d,0x31,0x4c,0x40,0x5c,0x56,0x4a,0xd3,0x1f,0xe1,0x30,
    0xde,0xea,0x10,0x9a,0x01,0x00,0x00,0x00,0x50,0x02,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xa0,0x00,0x00,0x00,0xd4,0x00,0x00,0x00,0x2c,0x01,0x00,0x00,
    0xb4,0x01,0x00,0x00,0x52,0x44,0x45,0x46,0x64,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xfe,0xff,
    0x10,0x81,0x00,0x00,0x3c,0x00,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,
    0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,
    0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0f,0x0f,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,0x50,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x0c,0x00,0x00,0x41,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x00,0x53,0x56,0x5f,
    0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x00,0xab,0xab,0xab,0x53,0x48,0x45,0x58,
    0x80,0x00,0x00,0x00,0x50,0x00,0x01,0x00,0x20,0x00,0x00,0x00,0x6a,0x08,0x00,0x01,
    0x5f,0x00,0x00,0x03,0xf2,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,
    0x32,0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x67,0x00,0x00,0x04,0xf2,0x20,0x10,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x36,0x00,0x00,0x05,0x32,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0xe6,0x1a,0x10,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x05,
    0x32,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x36,0x00,0x00,0x08,0xc2,0x20,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x94,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

];
/*
   cbuffer default_data : register(b0)
   {
       float4 _24_color : packoffset(c0);
   };

   Texture2D<float4> TEXTURE : register(t0);
   SamplerState _TEXTURE_sampler : register(s0);

   static float4 COLOR;
   static float2 fUV;

   struct SPIRV_Cross_Input
   {
       float2 fUV : TEXCOORD0;
   };

   struct SPIRV_Cross_Output
   {
       float4 COLOR : SV_Target0;
   };

   #line 16 "modules/Simple_Framework/render/default_shaders.glsl"
   void frag_main()
   {
   #line 16 "modules/Simple_Framework/render/default_shaders.glsl"
       COLOR = TEXTURE.Sample(_TEXTURE_sampler, fUV) * _24_color;
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       fUV = stage_input.fUV;
       frag_main();
       SPIRV_Cross_Output stage_output;
       stage_output.COLOR = COLOR;
       return stage_output;
   }
*/
base_default_fs_bytecode_hlsl5 :: u8.[
    0x44,0x58,0x42,0x43,0xe5,0x5a,0x05,0x78,0x0c,0x44,0x33,0x78,0x33,0x60,0x15,0xc5,
    0xc8,0x1c,0xc8,0xc2,0x01,0x00,0x00,0x00,0x54,0x03,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0xa0,0x01,0x00,0x00,0xd4,0x01,0x00,0x00,0x08,0x02,0x00,0x00,
    0xb8,0x02,0x00,0x00,0x52,0x44,0x45,0x46,0x64,0x01,0x00,0x00,0x01,0x00,0x00,0x00,
    0xc4,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xff,0xff,
    0x10,0x81,0x00,0x00,0x3c,0x01,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xad,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0xb5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5f,0x54,0x45,0x58,0x54,0x55,0x52,0x45,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x00,0x54,0x45,0x58,0x54,0x55,0x52,0x45,
    0x00,0x64,0x65,0x66,0x61,0x75,0x6c,0x74,0x5f,0x64,0x61,0x74,0x61,0x00,0xab,0xab,
    0xb5,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xdc,0x00,0x00,0x00,0x10,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0x10,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x18,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x5f,0x32,0x34,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x00,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x00,0xab,0xab,0xab,0x01,0x00,0x03,0x00,0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0e,0x01,0x00,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,
    0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,
    0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,
    0x61,0x72,0x67,0x65,0x74,0x00,0xab,0xab,0x53,0x48,0x45,0x58,0xa8,0x00,0x00,0x00,
    0x50,0x00,0x00,0x00,0x2a,0x00,0x00,0x00,0x6a,0x08,0x00,0x01,0x59,0x00,0x00,0x04,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,
    0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x68,0x00,0x00,0x02,0x01,0x00,0x00,0x00,0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,
    0x43,0x55,0x15,0x00,0xf2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,
    0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x94,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,
];
/*
   cbuffer circle_data : register(b0)
   {
       float4 _71_color : packoffset(c0);
       float2 _71_radius : packoffset(c1);
   };

   Texture2D<float4> TEXTURE : register(t0);
   SamplerState _TEXTURE_sampler : register(s0);

   static float4 COLOR;
   static float2 fUV;

   struct SPIRV_Cross_Input
   {
       float2 fUV : TEXCOORD0;
   };

   struct SPIRV_Cross_Output
   {
       float4 COLOR : SV_Target0;
   };

   #line 17 "modules/Simple_Framework/render/default_shaders.glsl"
   float circle(float2 _position, float _inner_radius, float _outer_radius)
   {
   #line 17 "modules/Simple_Framework/render/default_shaders.glsl"
       float2 _22 = _position - 0.5f.xx;
   #line 22 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 18 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 19 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 22 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 20 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 21 "modules/Simple_Framework/render/default_shaders.glsl"
       float _37 = dot(_22, _22) * 4.0f;
   #line 22 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 23 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 26 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 24 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 26 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 18 "modules/Simple_Framework/render/default_shaders.glsl"
       return (1.0f - smoothstep(_outer_radius - (_outer_radius * 0.00999999977648258209228515625f), _outer_radius + (_outer_radius * 0.00999999977648258209228515625f), _37)) - (1.0f - smoothstep(_inner_radius - (_inner_radius * 0.00999999977648258209228515625f), _inner_radius + (_inner_radius * 0.00999999977648258209228515625f), _37));
   }

   #line 30 "modules/Simple_Framework/render/default_shaders.glsl"
   void frag_main()
   {
   #line 30 "modules/Simple_Framework/render/default_shaders.glsl"
       COLOR = TEXTURE.Sample(_TEXTURE_sampler, fUV);
   #line 31 "modules/Simple_Framework/render/default_shaders.glsl"
       float2 param = fUV;
       float param_1 = _71_radius.x;
       float param_2 = _71_radius.y;
       COLOR *= float4(_71_color.xyz, circle(param, param_1, param_2) * _71_color.w);
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       fUV = stage_input.fUV;
       frag_main();
       SPIRV_Cross_Output stage_output;
       stage_output.COLOR = COLOR;
       return stage_output;
   }
*/
base_circle_fs_bytecode_hlsl5 :: u8.[
    0x44,0x58,0x42,0x43,0xfe,0x18,0x55,0x34,0xf2,0x18,0x91,0x44,0xd7,0xdc,0x61,0xc1,
    0x88,0x7a,0xdd,0xe3,0x01,0x00,0x00,0x00,0x84,0x05,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x34,0x02,0x00,0x00,0x68,0x02,0x00,0x00,
    0xe8,0x04,0x00,0x00,0x52,0x44,0x45,0x46,0xc4,0x01,0x00,0x00,0x01,0x00,0x00,0x00,
    0xc4,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xff,0xff,
    0x10,0x81,0x00,0x00,0x9c,0x01,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xad,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0xb5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5f,0x54,0x45,0x58,0x54,0x55,0x52,0x45,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x00,0x54,0x45,0x58,0x54,0x55,0x52,0x45,
    0x00,0x63,0x69,0x72,0x63,0x6c,0x65,0x5f,0x64,0x61,0x74,0x61,0x00,0xab,0xab,0xab,
    0xb5,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0xdc,0x00,0x00,0x00,0x20,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2c,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0x10,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x40,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x64,0x01,0x00,0x00,0x10,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x78,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x5f,0x37,0x31,0x5f,0x63,0x6f,0x6c,0x6f,
    0x72,0x00,0x66,0x6c,0x6f,0x61,0x74,0x34,0x00,0xab,0xab,0xab,0x01,0x00,0x03,0x00,
    0x01,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x36,0x01,0x00,0x00,
    0x5f,0x37,0x31,0x5f,0x72,0x61,0x64,0x69,0x75,0x73,0x00,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x00,0xab,0xab,0x01,0x00,0x03,0x00,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x6f,0x01,0x00,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,
    0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,
    0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,
    0x61,0x72,0x67,0x65,0x74,0x00,0xab,0xab,0x53,0x48,0x45,0x58,0x78,0x02,0x00,0x00,
    0x50,0x00,0x00,0x00,0x9e,0x00,0x00,0x00,0x6a,0x08,0x00,0x01,0x59,0x00,0x00,0x04,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,
    0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x68,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x32,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x00,0x00,0x00,0xbf,0x00,0x00,0x00,0xbf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x07,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x0b,
    0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0xa4,0x70,0x7d,0x3f,
    0x0a,0xd7,0xa3,0x3c,0xa4,0x70,0x7d,0x3f,0x0a,0xd7,0xa3,0x3c,0x56,0x80,0x20,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x32,0x00,0x00,0x0d,0x32,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x06,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x00,0x00,0x80,0x40,0x00,0x00,0x80,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x86,0x00,0x10,0x80,0x41,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x0e,0x00,0x00,0x0a,
    0xc2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,0x56,0x0d,0x10,0x00,
    0x01,0x00,0x00,0x00,0x38,0x20,0x00,0x07,0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0xe6,0x0a,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x32,0x00,0x00,0x0f,0xc2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x06,0x04,0x10,0x00,
    0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0xc0,0x00,0x00,0x00,0xc0,0x02,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00,0x00,0x40,0x40,0x38,0x00,0x00,0x07,
    0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x32,0x00,0x00,0x0d,0x32,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0xe6,0x0a,0x10,0x80,0x41,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x46,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,0x00,0x00,0x80,0x3f,
    0x00,0x00,0x80,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
    0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x80,0x41,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x08,
    0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x3a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x45,0x00,0x00,0x8b,
    0xc2,0x00,0x00,0x80,0x43,0x55,0x15,0x00,0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x07,0x82,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0x72,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x02,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x82,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x94,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,
];
/*
   cbuffer text_data : register(b0)
   {
       float4 _35_color : packoffset(c0);
       float2 _35_text_params : packoffset(c1);
   };

   Texture2D<float4> TEXTURE : register(t0);
   SamplerState _TEXTURE_sampler : register(s0);

   static float2 fUV;
   static float4 COLOR;

   struct SPIRV_Cross_Input
   {
       float2 fUV : TEXCOORD0;
   };

   struct SPIRV_Cross_Output
   {
       float4 COLOR : SV_Target0;
   };

   uint2 spvTextureSize(Texture2D<float4> Tex, uint Level, out uint Param)
   {
       uint2 ret;
       Tex.GetDimensions(Level, ret.x, ret.y, Param);
       return ret;
   }

   #line 17 "modules/Simple_Framework/render/default_shaders.glsl"
   float msdf_median(float r, float g, float b, float a)
   {
   #line 17 "modules/Simple_Framework/render/default_shaders.glsl"
       return min(max(min(r, g), min(max(r, g), b)), a);
   }

   #line 21 "modules/Simple_Framework/render/default_shaders.glsl"
   void frag_main()
   {
   #line 21 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 22 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 24 "modules/Simple_Framework/render/default_shaders.glsl"
       float4 _57 = TEXTURE.Sample(_TEXTURE_sampler, fUV);
   #line 25 "modules/Simple_Framework/render/default_shaders.glsl"
       uint _64_dummy_parameter;
   #line 26 "modules/Simple_Framework/render/default_shaders.glsl"
       float2 _70 = fwidth(fUV);
   #line 27 "modules/Simple_Framework/render/default_shaders.glsl"
       float _81 = max(0.5f * dot(_35_text_params.x.xx / float2(int2(spvTextureSize(TEXTURE, uint(0), _64_dummy_parameter))), 1.0f.xx / _70), 1.0f);
   #line 28 "modules/Simple_Framework/render/default_shaders.glsl"
       float param = _57.x;
       float param_1 = _57.y;
       float param_2 = _57.z;
       float param_3 = _57.w;
       float _98 = msdf_median(param, param_1, param_2, param_3) - 0.5f;
   #line 30 "modules/Simple_Framework/render/default_shaders.glsl"
       COLOR = _35_color;
   #line 32 "modules/Simple_Framework/render/default_shaders.glsl"
       if (_35_text_params.y > 0.0f)
       {
   #line 33 "modules/Simple_Framework/render/default_shaders.glsl"
   #line 34 "modules/Simple_Framework/render/default_shaders.glsl"
           COLOR.w *= clamp((_98 + (clamp(_35_text_params.y, 0.0f, _35_text_params.x * 0.5f) / _35_text_params.x)) * _81, 0.0f, 1.0f);
       }
       else
       {
   #line 36 "modules/Simple_Framework/render/default_shaders.glsl"
           COLOR.w *= clamp((_98 * _81) + 0.5f, 0.0f, 1.0f);
       }
   }

   SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
   {
       fUV = stage_input.fUV;
       frag_main();
       SPIRV_Cross_Output stage_output;
       stage_output.COLOR = COLOR;
       return stage_output;
   }
*/
base_text_fs_bytecode_hlsl5 :: u8.[
    0x44,0x58,0x42,0x43,0x03,0xcc,0x65,0xfe,0x4a,0x03,0x31,0x01,0xc8,0x85,0x2d,0x82,
    0xab,0x9d,0xbd,0xf3,0x01,0x00,0x00,0x00,0xb0,0x06,0x00,0x00,0x05,0x00,0x00,0x00,
    0x34,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x34,0x02,0x00,0x00,0x68,0x02,0x00,0x00,
    0x14,0x06,0x00,0x00,0x52,0x44,0x45,0x46,0xc4,0x01,0x00,0x00,0x01,0x00,0x00,0x00,
    0xc0,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x3c,0x00,0x00,0x00,0x00,0x05,0xff,0xff,
    0x10,0x81,0x00,0x00,0x9c,0x01,0x00,0x00,0x52,0x44,0x31,0x31,0x3c,0x00,0x00,0x00,
    0x18,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x28,0x00,0x00,0x00,0x24,0x00,0x00,0x00,
    0x0c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9c,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0xad,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
    0x05,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x0d,0x00,0x00,0x00,0xb5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x5f,0x54,0x45,0x58,0x54,0x55,0x52,0x45,
    0x5f,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x00,0x54,0x45,0x58,0x54,0x55,0x52,0x45,
    0x00,0x74,0x65,0x78,0x74,0x5f,0x64,0x61,0x74,0x61,0x00,0xab,0xb5,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0xd8,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x28,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x3c,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x60,0x01,0x00,0x00,
    0x10,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x78,0x01,0x00,0x00,
    0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
    0x00,0x00,0x00,0x00,0x5f,0x33,0x35,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x00,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x00,0xab,0xab,0xab,0x01,0x00,0x03,0x00,0x01,0x00,0x04,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x32,0x01,0x00,0x00,0x5f,0x33,0x35,0x5f,
    0x74,0x65,0x78,0x74,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x00,0x66,0x6c,0x6f,0x61,
    0x74,0x32,0x00,0xab,0x01,0x00,0x03,0x00,0x01,0x00,0x02,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x70,0x01,0x00,0x00,0x4d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,
    0x74,0x20,0x28,0x52,0x29,0x20,0x48,0x4c,0x53,0x4c,0x20,0x53,0x68,0x61,0x64,0x65,
    0x72,0x20,0x43,0x6f,0x6d,0x70,0x69,0x6c,0x65,0x72,0x20,0x31,0x30,0x2e,0x31,0x00,
    0x49,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x08,0x00,0x00,0x00,
    0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x03,0x03,0x00,0x00,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,
    0x00,0xab,0xab,0xab,0x4f,0x53,0x47,0x4e,0x2c,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x08,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x00,0x00,0x00,0x53,0x56,0x5f,0x54,
    0x61,0x72,0x67,0x65,0x74,0x00,0xab,0xab,0x53,0x48,0x45,0x58,0xa4,0x03,0x00,0x00,
    0x50,0x00,0x00,0x00,0xe9,0x00,0x00,0x00,0x6a,0x08,0x00,0x01,0x59,0x00,0x00,0x04,
    0x46,0x8e,0x20,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x5a,0x00,0x00,0x03,
    0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,0x58,0x18,0x00,0x04,0x00,0x70,0x10,0x00,
    0x00,0x00,0x00,0x00,0x55,0x55,0x00,0x00,0x62,0x10,0x00,0x03,0x32,0x10,0x10,0x00,
    0x00,0x00,0x00,0x00,0x65,0x00,0x00,0x03,0xf2,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x68,0x00,0x00,0x02,0x02,0x00,0x00,0x00,0x38,0x00,0x00,0x08,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x3f,0x0a,0x80,0x20,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x34,0x00,0x00,0x08,0x22,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,0x80,0x20,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x33,0x00,0x00,0x07,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x08,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x45,0x00,0x00,0x8b,0xc2,0x00,0x00,0x80,0x43,0x55,0x15,0x00,
    0xf2,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x10,0x00,0x00,0x00,0x00,0x00,
    0x34,0x00,0x00,0x07,0x22,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x33,0x00,0x00,0x07,
    0x22,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x33,0x00,0x00,0x07,0x42,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x34,0x00,0x00,0x07,0x22,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x33,0x00,0x00,0x07,0x22,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x3a,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,
    0x22,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x00,0x00,0x00,0xbf,0x00,0x00,0x00,0x07,0x12,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x7a,0x00,0x00,0x05,0xc2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x06,0x14,0x10,0x00,0x00,0x00,0x00,0x00,0x7c,0x00,0x00,0x05,0x32,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0x46,0x10,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09,
    0xc2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0xa6,0x0e,0x10,0x80,0x81,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x06,0x04,0x10,0x80,0x81,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x0e,0x00,0x00,0x0a,0xc2,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x02,0x40,0x00,0x00,
    0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,0x00,0x00,0x80,0x3f,
    0xa6,0x0e,0x10,0x00,0x00,0x00,0x00,0x00,0x3d,0x10,0x00,0x89,0xc2,0x00,0x00,0x80,
    0x43,0x55,0x15,0x00,0x32,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x00,0x00,0x46,0x7e,0x10,0x00,0x00,0x00,0x00,0x00,0x2b,0x00,0x00,0x05,
    0x32,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x0e,0x00,0x00,0x08,0x32,0x00,0x10,0x00,0x01,0x00,0x00,0x00,0x06,0x80,0x20,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x46,0x00,0x10,0x00,0x01,0x00,0x00,0x00,
    0x0f,0x00,0x00,0x07,0x42,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x46,0x00,0x10,0x00,
    0x01,0x00,0x00,0x00,0xe6,0x0a,0x10,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x07,
    0x42,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x3f,0x34,0x00,0x00,0x07,0x42,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x80,0x3f,0x38,0x20,0x00,0x07,0x12,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x32,0x20,0x00,0x09,0x22,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x1a,0x00,0x10,0x00,
    0x00,0x00,0x00,0x00,0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x01,0x40,0x00,0x00,
    0x00,0x00,0x00,0x3f,0x38,0x00,0x00,0x08,0x32,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x46,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0xf6,0x8f,0x20,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x31,0x00,0x00,0x08,0x42,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x01,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x1a,0x80,0x20,0x00,0x00,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x37,0x00,0x00,0x09,0x82,0x20,0x10,0x00,0x00,0x00,0x00,0x00,
    0x2a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x0a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,
    0x1a,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x36,0x00,0x00,0x06,0x72,0x20,0x10,0x00,
    0x00,0x00,0x00,0x00,0x46,0x82,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x3e,0x00,0x00,0x01,0x53,0x54,0x41,0x54,0x94,0x00,0x00,0x00,0x1d,0x00,0x00,0x00,
    0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x17,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x01,0x00,0x00,0x00,
    0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

];

#scope_export
base_circle_shader_desc :: (backend: sg_backend) -> sg_shader_desc {
    desc: sg_shader_desc;
    if backend == {
        case .GLCORE33;
            desc.attrs[0].name = "vPosUV";
            desc.vs.source = base_vs_source_glsl330.data;
            desc.vs.entry = "main";
            desc.fs.source = base_circle_fs_source_glsl330.data;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 32;
            desc.fs.uniform_blocks[0].layout = .STD140;
            desc.fs.uniform_blocks[0].uniforms[0].name = "circle_data";
            desc.fs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
            desc.fs.images[0].name = "TEXTURE";
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sampler_type = .FLOAT;
            desc.label = "base_circle_shader";
        case .D3D11;
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.vs.bytecode.ptr = base_vs_bytecode_hlsl5.data;
            desc.vs.bytecode.size = 592;
            desc.vs.entry = "main";
            desc.fs.bytecode.ptr = base_circle_fs_bytecode_hlsl5.data;
            desc.fs.bytecode.size = 1412;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 32;
            desc.fs.uniform_blocks[0].layout = .STD140;
            desc.fs.images[0].name = "TEXTURE";
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sampler_type = .FLOAT;
            desc.label = "base_circle_shader";
    }
    return desc;
}
base_default_shader_desc :: (backend: sg_backend) -> sg_shader_desc {
    desc: sg_shader_desc;
    if backend == {
        case .GLCORE33;
            desc.attrs[0].name = "vPosUV";
            desc.vs.source = base_vs_source_glsl330.data;
            desc.vs.entry = "main";
            desc.fs.source = base_default_fs_source_glsl330.data;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = .STD140;
            desc.fs.uniform_blocks[0].uniforms[0].name = "default_data";
            desc.fs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 1;
            desc.fs.images[0].name = "TEXTURE";
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sampler_type = .FLOAT;
            desc.label = "base_default_shader";
        case .D3D11;
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.vs.bytecode.ptr = base_vs_bytecode_hlsl5.data;
            desc.vs.bytecode.size = 592;
            desc.vs.entry = "main";
            desc.fs.bytecode.ptr = base_default_fs_bytecode_hlsl5.data;
            desc.fs.bytecode.size = 852;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 16;
            desc.fs.uniform_blocks[0].layout = .STD140;
            desc.fs.images[0].name = "TEXTURE";
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sampler_type = .FLOAT;
            desc.label = "base_default_shader";
    }
    return desc;
}
base_text_shader_desc :: (backend: sg_backend) -> sg_shader_desc {
    desc: sg_shader_desc;
    if backend == {
        case .GLCORE33;
            desc.attrs[0].name = "vPosUV";
            desc.vs.source = base_vs_source_glsl330.data;
            desc.vs.entry = "main";
            desc.fs.source = base_text_fs_source_glsl330.data;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 32;
            desc.fs.uniform_blocks[0].layout = .STD140;
            desc.fs.uniform_blocks[0].uniforms[0].name = "text_data";
            desc.fs.uniform_blocks[0].uniforms[0].type = .FLOAT4;
            desc.fs.uniform_blocks[0].uniforms[0].array_count = 2;
            desc.fs.images[0].name = "TEXTURE";
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sampler_type = .FLOAT;
            desc.label = "base_text_shader";
        case .D3D11;
            desc.attrs[0].sem_name = "TEXCOORD";
            desc.attrs[0].sem_index = 0;
            desc.vs.bytecode.ptr = base_vs_bytecode_hlsl5.data;
            desc.vs.bytecode.size = 592;
            desc.vs.entry = "main";
            desc.fs.bytecode.ptr = base_text_fs_bytecode_hlsl5.data;
            desc.fs.bytecode.size = 1712;
            desc.fs.entry = "main";
            desc.fs.uniform_blocks[0].size = 32;
            desc.fs.uniform_blocks[0].layout = .STD140;
            desc.fs.images[0].name = "TEXTURE";
            desc.fs.images[0].image_type = ._2D;
            desc.fs.images[0].sampler_type = .FLOAT;
            desc.label = "base_text_shader";
    }
    return desc;
}
